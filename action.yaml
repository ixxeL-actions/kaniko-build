---
name: Kaniko build
description: Build docker images with Kaniko
author: ixxeL
inputs:
  img-name:
    description: name of the image
    required: true
  tag:
    description: tagged name to apply to the built image
    required: true
  file:
    description: pathname or URL of a Dockerfile
    required: false
    default: ./Dockerfile
  format:
    description: format of the built images manifest and metadata
    required: false
    default: oci
  build-arg:
    description: argument=value to supply to the builder
    required: false
    default: ''
  working-dir:
    description: directory in which to find the Dockerfile
    required: false
    default: .

runs:
  using: composite
  steps:
  - id: kaniko-build
    run: |
      echo -e "${BLUE}[ STEP - BUILDING IMAGE ] > Building docker image ${{ inputs.img-name }}:${{ inputs.tag }} with Kaniko.${BLANK}"
      echo -e "${CYAN}[ INFO ] > Kaniko version.${BLANK}"
      executor version

      echo -e "${YELLOW}[ EXECUTING ] > Executing build of ${{ inputs.tag }}.${BLANK}"
      if [ "${{ inputs.build-arg }}" ]
      then
          BUILD_ARG=${{ inputs.build-arg }}
          [[ ! "$BUILD_ARG" =~ ^\|.+ ]] || BUILD_ARG="${BUILD_ARG:1}"
          full_str=${BUILD_ARG//|/ --build-arg }
          BUILD_ARGS="--build-arg $full_str"
          echo -e "${CYAN}[ INFO ] > Build args are the following${BLANK}"
          echo "${BUILD_ARGS}"
      fi
      mkdir -p ${TARGET_DIR}

      executor --context ${{ inputs.working-dir }} \
              --dockerfile ${{ inputs.file }} \
              --tarPath=./${{ inputs.img-name }}.tar \
              --destination=${{ inputs.img-name }}:${{ inputs.tag }} \
              --skip-tls-verify-pull \
              --skip-tls-verify \
              --no-push \
              ${BUILD_ARGS}

      if [[ $? = 0 ]]
      then
        size=$(du -sh ./${{ inputs.img-name }}.tar | awk '{print $1}')
        echo -e "${GREEN}[ SUCCESS ] > Docker image ${{ inputs.img-name }}:${{ inputs.tag }} successfully built with Kaniko. SIZE --> [ ${size} ]${BLANK}"
      else
        echo -e "${RED}[ FAIL ] > Docker image ${{ inputs.img-name }}:${{ inputs.tag }} failed to build with Kaniko !.${BLANK}"
        exit 1
      fi
    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m